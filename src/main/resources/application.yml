spring:
  datasource:
    url: jdbc:mysql://localhost:3306/flywaydb
    username: flyway
    password: password
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      password: ${spring.datasource.password}
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
      connection-timeout: 30000
      leak-detection-threshold: 3600000
      idle-timeout: 1200000
      max-lifetime: 28800000
      connection-test-query: SELECT 1 FROM DUAL
      minimum-idle: 5
      maximum-pool-size: 50
      driver-class-name: com.mysql.cj.jdbc.Driver
      schema: FLYWAYDB
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        show-sql: true
        format_sql: true
        default_schema: FLYWAYDB
    show-sql: true
    database: default
  flyway:
    enabled: false
    baseline-on-migrate: true

h2:
  datasource:
    type: ${spring.datasource.type}
    url: jdbc:h2:mem:flywaydb;Mode=MYSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;INIT=CREATE SCHEMA IF NOT EXISTS FLYWAYDB\;SET SCHEMA FLYWAYDB;
    username: ${spring.datasource.hikari.schema}
    hikari:
      pool-name: FLYWAY-DB-POOL-H2
      jdbc-url: ${h2.datasource.url}
      username: ${spring.datasource.hikari.schema}
      driver-class-name: org.h2.Driver
      schema: ${spring.datasource.hikari.schema}
      data-source-properties:
        cachePrepStmts: ${spring.datasource.hikari.data-source-properties.cachePrepStmts}
        prepStmtCacheSize: ${spring.datasource.hikari.data-source-properties.prepStmtCacheSize}
        prepStmtCacheSqlLimit: ${spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit}
        useServerPrepStmts: ${spring.datasource.hikari.data-source-properties.useServerPrepStmts}
      connection-timeout: ${spring.datasource.hikari.connection-timeout}
      leak-detection-threshold: ${spring.datasource.hikari.leak-detection-threshold}
      idle-timeout: ${spring.datasource.hikari.idle-timeout}
      max-lifetime: ${spring.datasource.hikari.max-lifetime}
      connection-test-query: SELECT 1
      minimum-idle: ${spring.datasource.hikari.minimum-idle}
      maximum-pool-size: ${spring.datasource.hikari.maximum-pool-size}

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
    com:
      zaxxer:
        hikari:
          HikariConfig: DEBUG

